// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package tests

import (
	"context"
	petstoresdk "github.com/bflad/petstore-sdk"
	"github.com/bflad/petstore-sdk/internal/utils"
	"github.com/bflad/petstore-sdk/models/components"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func TestPet_UpdatePet(t *testing.T) {
	ctx := context.Background()

	s := petstoresdk.New(
		petstoresdk.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		petstoresdk.WithClient(createTestHTTPClient("updatePet")),
		petstoresdk.WithSecurity("<YOUR_API_KEY_HERE>"),
	)

	res, err := s.Pet.UpdatePet(ctx, components.Pet{
		ID:   petstoresdk.Int64(10),
		Name: "doggie",
		Category: &components.Category{
			ID:   petstoresdk.Int64(1),
			Name: petstoresdk.String("Dogs"),
		},
		PhotoUrls: []string{
			"<value>",
			"<value>",
		},
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Pet)
	assert.Equal(t, &components.Pet{
		ID:   petstoresdk.Int64(10),
		Name: "doggie",
		Category: &components.Category{
			ID:   petstoresdk.Int64(1),
			Name: petstoresdk.String("Dogs"),
		},
		PhotoUrls: []string{
			"<value>",
		},
	}, res.Pet)

}

func TestPet_FindPetsByStatus(t *testing.T) {
	ctx := context.Background()

	s := petstoresdk.New(
		petstoresdk.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		petstoresdk.WithClient(createTestHTTPClient("findPetsByStatus")),
		petstoresdk.WithSecurity("<YOUR_API_KEY_HERE>"),
	)

	res, err := s.Pet.FindPetsByStatus(ctx, nil)
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Pets)
	assert.Equal(t, []components.Pet{
		components.Pet{
			ID:   petstoresdk.Int64(10),
			Name: "doggie",
			Category: &components.Category{
				ID:   petstoresdk.Int64(1),
				Name: petstoresdk.String("Dogs"),
			},
			PhotoUrls: []string{},
		},
		components.Pet{
			ID:   petstoresdk.Int64(10),
			Name: "doggie",
			Category: &components.Category{
				ID:   petstoresdk.Int64(1),
				Name: petstoresdk.String("Dogs"),
			},
			PhotoUrls: []string{
				"<value>",
			},
		},
		components.Pet{
			ID:   petstoresdk.Int64(10),
			Name: "doggie",
			Category: &components.Category{
				ID:   petstoresdk.Int64(1),
				Name: petstoresdk.String("Dogs"),
			},
			PhotoUrls: []string{},
		},
	}, res.Pets)

}

func TestPet_FindPetsByTags(t *testing.T) {
	ctx := context.Background()

	s := petstoresdk.New(
		petstoresdk.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		petstoresdk.WithClient(createTestHTTPClient("findPetsByTags")),
		petstoresdk.WithSecurity("<YOUR_API_KEY_HERE>"),
	)

	res, err := s.Pet.FindPetsByTags(ctx, nil)
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Pets)
	assert.Equal(t, []components.Pet{
		components.Pet{
			ID:   petstoresdk.Int64(10),
			Name: "doggie",
			Category: &components.Category{
				ID:   petstoresdk.Int64(1),
				Name: petstoresdk.String("Dogs"),
			},
			PhotoUrls: []string{
				"<value>",
				"<value>",
				"<value>",
			},
		},
	}, res.Pets)

}

func TestPet_GetPetByID(t *testing.T) {
	ctx := context.Background()

	s := petstoresdk.New(
		petstoresdk.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		petstoresdk.WithClient(createTestHTTPClient("getPetById")),
		petstoresdk.WithSecurity("<YOUR_API_KEY_HERE>"),
	)

	res, err := s.Pet.GetPetByID(ctx, 504151)
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Pet)
	assert.Equal(t, &components.Pet{
		ID:   petstoresdk.Int64(10),
		Name: "doggie",
		Category: &components.Category{
			ID:   petstoresdk.Int64(1),
			Name: petstoresdk.String("Dogs"),
		},
		PhotoUrls: []string{},
	}, res.Pet)

}

func TestPet_DeletePet(t *testing.T) {
	ctx := context.Background()

	s := petstoresdk.New(
		petstoresdk.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		petstoresdk.WithClient(createTestHTTPClient("deletePet")),
		petstoresdk.WithSecurity("<YOUR_API_KEY_HERE>"),
	)

	res, err := s.Pet.DeletePet(ctx, 441876, nil)
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Pet)
	assert.Equal(t, &components.Pet{
		ID:   petstoresdk.Int64(10),
		Name: "doggie",
		Category: &components.Category{
			ID:   petstoresdk.Int64(1),
			Name: petstoresdk.String("Dogs"),
		},
		PhotoUrls: []string{
			"<value>",
		},
	}, res.Pet)

}

func TestPet_AddPetFido(t *testing.T) {
	ctx := context.Background()

	s := petstoresdk.New(
		petstoresdk.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		petstoresdk.WithClient(createTestHTTPClient("addPet-fido")),
		petstoresdk.WithSecurity("<YOUR_API_KEY_HERE>"),
	)

	res, err := s.Pet.AddPet(ctx, components.Pet{
		Name: "Fido",
		PhotoUrls: []string{
			"https://www.example.com/fido.jpg",
		},
		Status: components.StatusAvailable.ToPointer(),
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Pet)
	assert.Equal(t, &components.Pet{
		ID:   petstoresdk.Int64(1),
		Name: "Fido",
		PhotoUrls: []string{
			"https://www.example.com/fido.jpg",
		},
		Status: components.StatusAvailable.ToPointer(),
	}, res.Pet)

}

func TestPet_AddPetRover(t *testing.T) {
	ctx := context.Background()

	s := petstoresdk.New(
		petstoresdk.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		petstoresdk.WithClient(createTestHTTPClient("addPet-rover")),
		petstoresdk.WithSecurity("<YOUR_API_KEY_HERE>"),
	)

	res, err := s.Pet.AddPet(ctx, components.Pet{
		Name: "Rover",
		PhotoUrls: []string{
			"https://www.example.com/rover1.jpg",
			"https://www.example.com/rover2.jpg",
		},
		Status: components.StatusPending.ToPointer(),
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Pet)
	assert.Equal(t, &components.Pet{
		ID:   petstoresdk.Int64(2),
		Name: "Rover",
		PhotoUrls: []string{
			"https://www.example.com/rover1.jpg",
			"https://www.example.com/rover2.jpg",
		},
		Status: components.StatusPending.ToPointer(),
	}, res.Pet)

}

func TestPet_AddPet(t *testing.T) {
	ctx := context.Background()

	s := petstoresdk.New(
		petstoresdk.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		petstoresdk.WithClient(createTestHTTPClient("addPet")),
		petstoresdk.WithSecurity("<YOUR_API_KEY_HERE>"),
	)

	res, err := s.Pet.AddPet(ctx, components.Pet{
		ID:   petstoresdk.Int64(10),
		Name: "doggie",
		Category: &components.Category{
			ID:   petstoresdk.Int64(1),
			Name: petstoresdk.String("Dogs"),
		},
		PhotoUrls: []string{
			"<value>",
		},
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Pet)
	assert.Equal(t, &components.Pet{
		ID:   petstoresdk.Int64(10),
		Name: "doggie",
		Category: &components.Category{
			ID:   petstoresdk.Int64(1),
			Name: petstoresdk.String("Dogs"),
		},
		PhotoUrls: []string{
			"<value>",
		},
	}, res.Pet)

}
